/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.service.archives;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-23")
public class ArchivesModel implements org.apache.thrift.TBase<ArchivesModel, ArchivesModel._Fields>, java.io.Serializable, Cloneable, Comparable<ArchivesModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ArchivesModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STUDENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("studentCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLASS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("classCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARCHIVES_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("archivesName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TEACHER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TEACHER_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherComment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DELETE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ARCHIVES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("archivesType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ARCHIVES_ANNUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("archivesAnnual", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SCHOOL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolCode", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArchivesModelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArchivesModelTupleSchemeFactory();

  public long id; // required
  public java.lang.String code; // required
  public java.lang.String studentCode; // required
  public java.lang.String classCode; // required
  public java.lang.String archivesName; // required
  public java.lang.String teacherCode; // required
  public java.lang.String teacherComment; // required
  public java.lang.String modifyTime; // required
  public java.lang.String deleteTime; // required
  public java.lang.String createTime; // required
  public java.lang.String isDelete; // required
  public java.lang.String status; // required
  public java.lang.String archivesType; // required
  public java.lang.String archivesAnnual; // required
  public java.lang.String schoolCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    STUDENT_CODE((short)3, "studentCode"),
    CLASS_CODE((short)4, "classCode"),
    ARCHIVES_NAME((short)5, "archivesName"),
    TEACHER_CODE((short)6, "teacherCode"),
    TEACHER_COMMENT((short)7, "teacherComment"),
    MODIFY_TIME((short)8, "modifyTime"),
    DELETE_TIME((short)9, "deleteTime"),
    CREATE_TIME((short)10, "createTime"),
    IS_DELETE((short)11, "isDelete"),
    STATUS((short)12, "status"),
    ARCHIVES_TYPE((short)13, "archivesType"),
    ARCHIVES_ANNUAL((short)14, "archivesAnnual"),
    SCHOOL_CODE((short)15, "schoolCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // STUDENT_CODE
          return STUDENT_CODE;
        case 4: // CLASS_CODE
          return CLASS_CODE;
        case 5: // ARCHIVES_NAME
          return ARCHIVES_NAME;
        case 6: // TEACHER_CODE
          return TEACHER_CODE;
        case 7: // TEACHER_COMMENT
          return TEACHER_COMMENT;
        case 8: // MODIFY_TIME
          return MODIFY_TIME;
        case 9: // DELETE_TIME
          return DELETE_TIME;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // IS_DELETE
          return IS_DELETE;
        case 12: // STATUS
          return STATUS;
        case 13: // ARCHIVES_TYPE
          return ARCHIVES_TYPE;
        case 14: // ARCHIVES_ANNUAL
          return ARCHIVES_ANNUAL;
        case 15: // SCHOOL_CODE
          return SCHOOL_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("studentCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_CODE, new org.apache.thrift.meta_data.FieldMetaData("classCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVES_NAME, new org.apache.thrift.meta_data.FieldMetaData("archivesName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_CODE, new org.apache.thrift.meta_data.FieldMetaData("teacherCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("teacherComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETE_TIME, new org.apache.thrift.meta_data.FieldMetaData("deleteTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("archivesType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVES_ANNUAL, new org.apache.thrift.meta_data.FieldMetaData("archivesAnnual", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHOOL_CODE, new org.apache.thrift.meta_data.FieldMetaData("schoolCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArchivesModel.class, metaDataMap);
  }

  public ArchivesModel() {
  }

  public ArchivesModel(
    long id,
    java.lang.String code,
    java.lang.String studentCode,
    java.lang.String classCode,
    java.lang.String archivesName,
    java.lang.String teacherCode,
    java.lang.String teacherComment,
    java.lang.String modifyTime,
    java.lang.String deleteTime,
    java.lang.String createTime,
    java.lang.String isDelete,
    java.lang.String status,
    java.lang.String archivesType,
    java.lang.String archivesAnnual,
    java.lang.String schoolCode)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.code = code;
    this.studentCode = studentCode;
    this.classCode = classCode;
    this.archivesName = archivesName;
    this.teacherCode = teacherCode;
    this.teacherComment = teacherComment;
    this.modifyTime = modifyTime;
    this.deleteTime = deleteTime;
    this.createTime = createTime;
    this.isDelete = isDelete;
    this.status = status;
    this.archivesType = archivesType;
    this.archivesAnnual = archivesAnnual;
    this.schoolCode = schoolCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ArchivesModel(ArchivesModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetStudentCode()) {
      this.studentCode = other.studentCode;
    }
    if (other.isSetClassCode()) {
      this.classCode = other.classCode;
    }
    if (other.isSetArchivesName()) {
      this.archivesName = other.archivesName;
    }
    if (other.isSetTeacherCode()) {
      this.teacherCode = other.teacherCode;
    }
    if (other.isSetTeacherComment()) {
      this.teacherComment = other.teacherComment;
    }
    if (other.isSetModifyTime()) {
      this.modifyTime = other.modifyTime;
    }
    if (other.isSetDeleteTime()) {
      this.deleteTime = other.deleteTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetIsDelete()) {
      this.isDelete = other.isDelete;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetArchivesType()) {
      this.archivesType = other.archivesType;
    }
    if (other.isSetArchivesAnnual()) {
      this.archivesAnnual = other.archivesAnnual;
    }
    if (other.isSetSchoolCode()) {
      this.schoolCode = other.schoolCode;
    }
  }

  public ArchivesModel deepCopy() {
    return new ArchivesModel(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.code = null;
    this.studentCode = null;
    this.classCode = null;
    this.archivesName = null;
    this.teacherCode = null;
    this.teacherComment = null;
    this.modifyTime = null;
    this.deleteTime = null;
    this.createTime = null;
    this.isDelete = null;
    this.status = null;
    this.archivesType = null;
    this.archivesAnnual = null;
    this.schoolCode = null;
  }

  public long getId() {
    return this.id;
  }

  public ArchivesModel setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getCode() {
    return this.code;
  }

  public ArchivesModel setCode(java.lang.String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public java.lang.String getStudentCode() {
    return this.studentCode;
  }

  public ArchivesModel setStudentCode(java.lang.String studentCode) {
    this.studentCode = studentCode;
    return this;
  }

  public void unsetStudentCode() {
    this.studentCode = null;
  }

  /** Returns true if field studentCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentCode() {
    return this.studentCode != null;
  }

  public void setStudentCodeIsSet(boolean value) {
    if (!value) {
      this.studentCode = null;
    }
  }

  public java.lang.String getClassCode() {
    return this.classCode;
  }

  public ArchivesModel setClassCode(java.lang.String classCode) {
    this.classCode = classCode;
    return this;
  }

  public void unsetClassCode() {
    this.classCode = null;
  }

  /** Returns true if field classCode is set (has been assigned a value) and false otherwise */
  public boolean isSetClassCode() {
    return this.classCode != null;
  }

  public void setClassCodeIsSet(boolean value) {
    if (!value) {
      this.classCode = null;
    }
  }

  public java.lang.String getArchivesName() {
    return this.archivesName;
  }

  public ArchivesModel setArchivesName(java.lang.String archivesName) {
    this.archivesName = archivesName;
    return this;
  }

  public void unsetArchivesName() {
    this.archivesName = null;
  }

  /** Returns true if field archivesName is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivesName() {
    return this.archivesName != null;
  }

  public void setArchivesNameIsSet(boolean value) {
    if (!value) {
      this.archivesName = null;
    }
  }

  public java.lang.String getTeacherCode() {
    return this.teacherCode;
  }

  public ArchivesModel setTeacherCode(java.lang.String teacherCode) {
    this.teacherCode = teacherCode;
    return this;
  }

  public void unsetTeacherCode() {
    this.teacherCode = null;
  }

  /** Returns true if field teacherCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherCode() {
    return this.teacherCode != null;
  }

  public void setTeacherCodeIsSet(boolean value) {
    if (!value) {
      this.teacherCode = null;
    }
  }

  public java.lang.String getTeacherComment() {
    return this.teacherComment;
  }

  public ArchivesModel setTeacherComment(java.lang.String teacherComment) {
    this.teacherComment = teacherComment;
    return this;
  }

  public void unsetTeacherComment() {
    this.teacherComment = null;
  }

  /** Returns true if field teacherComment is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherComment() {
    return this.teacherComment != null;
  }

  public void setTeacherCommentIsSet(boolean value) {
    if (!value) {
      this.teacherComment = null;
    }
  }

  public java.lang.String getModifyTime() {
    return this.modifyTime;
  }

  public ArchivesModel setModifyTime(java.lang.String modifyTime) {
    this.modifyTime = modifyTime;
    return this;
  }

  public void unsetModifyTime() {
    this.modifyTime = null;
  }

  /** Returns true if field modifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTime() {
    return this.modifyTime != null;
  }

  public void setModifyTimeIsSet(boolean value) {
    if (!value) {
      this.modifyTime = null;
    }
  }

  public java.lang.String getDeleteTime() {
    return this.deleteTime;
  }

  public ArchivesModel setDeleteTime(java.lang.String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  public void unsetDeleteTime() {
    this.deleteTime = null;
  }

  /** Returns true if field deleteTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteTime() {
    return this.deleteTime != null;
  }

  public void setDeleteTimeIsSet(boolean value) {
    if (!value) {
      this.deleteTime = null;
    }
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public ArchivesModel setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getIsDelete() {
    return this.isDelete;
  }

  public ArchivesModel setIsDelete(java.lang.String isDelete) {
    this.isDelete = isDelete;
    return this;
  }

  public void unsetIsDelete() {
    this.isDelete = null;
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return this.isDelete != null;
  }

  public void setIsDeleteIsSet(boolean value) {
    if (!value) {
      this.isDelete = null;
    }
  }

  public java.lang.String getStatus() {
    return this.status;
  }

  public ArchivesModel setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public java.lang.String getArchivesType() {
    return this.archivesType;
  }

  public ArchivesModel setArchivesType(java.lang.String archivesType) {
    this.archivesType = archivesType;
    return this;
  }

  public void unsetArchivesType() {
    this.archivesType = null;
  }

  /** Returns true if field archivesType is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivesType() {
    return this.archivesType != null;
  }

  public void setArchivesTypeIsSet(boolean value) {
    if (!value) {
      this.archivesType = null;
    }
  }

  public java.lang.String getArchivesAnnual() {
    return this.archivesAnnual;
  }

  public ArchivesModel setArchivesAnnual(java.lang.String archivesAnnual) {
    this.archivesAnnual = archivesAnnual;
    return this;
  }

  public void unsetArchivesAnnual() {
    this.archivesAnnual = null;
  }

  /** Returns true if field archivesAnnual is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivesAnnual() {
    return this.archivesAnnual != null;
  }

  public void setArchivesAnnualIsSet(boolean value) {
    if (!value) {
      this.archivesAnnual = null;
    }
  }

  public java.lang.String getSchoolCode() {
    return this.schoolCode;
  }

  public ArchivesModel setSchoolCode(java.lang.String schoolCode) {
    this.schoolCode = schoolCode;
    return this;
  }

  public void unsetSchoolCode() {
    this.schoolCode = null;
  }

  /** Returns true if field schoolCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolCode() {
    return this.schoolCode != null;
  }

  public void setSchoolCodeIsSet(boolean value) {
    if (!value) {
      this.schoolCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((java.lang.String)value);
      }
      break;

    case STUDENT_CODE:
      if (value == null) {
        unsetStudentCode();
      } else {
        setStudentCode((java.lang.String)value);
      }
      break;

    case CLASS_CODE:
      if (value == null) {
        unsetClassCode();
      } else {
        setClassCode((java.lang.String)value);
      }
      break;

    case ARCHIVES_NAME:
      if (value == null) {
        unsetArchivesName();
      } else {
        setArchivesName((java.lang.String)value);
      }
      break;

    case TEACHER_CODE:
      if (value == null) {
        unsetTeacherCode();
      } else {
        setTeacherCode((java.lang.String)value);
      }
      break;

    case TEACHER_COMMENT:
      if (value == null) {
        unsetTeacherComment();
      } else {
        setTeacherComment((java.lang.String)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModifyTime();
      } else {
        setModifyTime((java.lang.String)value);
      }
      break;

    case DELETE_TIME:
      if (value == null) {
        unsetDeleteTime();
      } else {
        setDeleteTime((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case ARCHIVES_TYPE:
      if (value == null) {
        unsetArchivesType();
      } else {
        setArchivesType((java.lang.String)value);
      }
      break;

    case ARCHIVES_ANNUAL:
      if (value == null) {
        unsetArchivesAnnual();
      } else {
        setArchivesAnnual((java.lang.String)value);
      }
      break;

    case SCHOOL_CODE:
      if (value == null) {
        unsetSchoolCode();
      } else {
        setSchoolCode((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case STUDENT_CODE:
      return getStudentCode();

    case CLASS_CODE:
      return getClassCode();

    case ARCHIVES_NAME:
      return getArchivesName();

    case TEACHER_CODE:
      return getTeacherCode();

    case TEACHER_COMMENT:
      return getTeacherComment();

    case MODIFY_TIME:
      return getModifyTime();

    case DELETE_TIME:
      return getDeleteTime();

    case CREATE_TIME:
      return getCreateTime();

    case IS_DELETE:
      return getIsDelete();

    case STATUS:
      return getStatus();

    case ARCHIVES_TYPE:
      return getArchivesType();

    case ARCHIVES_ANNUAL:
      return getArchivesAnnual();

    case SCHOOL_CODE:
      return getSchoolCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case STUDENT_CODE:
      return isSetStudentCode();
    case CLASS_CODE:
      return isSetClassCode();
    case ARCHIVES_NAME:
      return isSetArchivesName();
    case TEACHER_CODE:
      return isSetTeacherCode();
    case TEACHER_COMMENT:
      return isSetTeacherComment();
    case MODIFY_TIME:
      return isSetModifyTime();
    case DELETE_TIME:
      return isSetDeleteTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case IS_DELETE:
      return isSetIsDelete();
    case STATUS:
      return isSetStatus();
    case ARCHIVES_TYPE:
      return isSetArchivesType();
    case ARCHIVES_ANNUAL:
      return isSetArchivesAnnual();
    case SCHOOL_CODE:
      return isSetSchoolCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ArchivesModel)
      return this.equals((ArchivesModel)that);
    return false;
  }

  public boolean equals(ArchivesModel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_studentCode = true && this.isSetStudentCode();
    boolean that_present_studentCode = true && that.isSetStudentCode();
    if (this_present_studentCode || that_present_studentCode) {
      if (!(this_present_studentCode && that_present_studentCode))
        return false;
      if (!this.studentCode.equals(that.studentCode))
        return false;
    }

    boolean this_present_classCode = true && this.isSetClassCode();
    boolean that_present_classCode = true && that.isSetClassCode();
    if (this_present_classCode || that_present_classCode) {
      if (!(this_present_classCode && that_present_classCode))
        return false;
      if (!this.classCode.equals(that.classCode))
        return false;
    }

    boolean this_present_archivesName = true && this.isSetArchivesName();
    boolean that_present_archivesName = true && that.isSetArchivesName();
    if (this_present_archivesName || that_present_archivesName) {
      if (!(this_present_archivesName && that_present_archivesName))
        return false;
      if (!this.archivesName.equals(that.archivesName))
        return false;
    }

    boolean this_present_teacherCode = true && this.isSetTeacherCode();
    boolean that_present_teacherCode = true && that.isSetTeacherCode();
    if (this_present_teacherCode || that_present_teacherCode) {
      if (!(this_present_teacherCode && that_present_teacherCode))
        return false;
      if (!this.teacherCode.equals(that.teacherCode))
        return false;
    }

    boolean this_present_teacherComment = true && this.isSetTeacherComment();
    boolean that_present_teacherComment = true && that.isSetTeacherComment();
    if (this_present_teacherComment || that_present_teacherComment) {
      if (!(this_present_teacherComment && that_present_teacherComment))
        return false;
      if (!this.teacherComment.equals(that.teacherComment))
        return false;
    }

    boolean this_present_modifyTime = true && this.isSetModifyTime();
    boolean that_present_modifyTime = true && that.isSetModifyTime();
    if (this_present_modifyTime || that_present_modifyTime) {
      if (!(this_present_modifyTime && that_present_modifyTime))
        return false;
      if (!this.modifyTime.equals(that.modifyTime))
        return false;
    }

    boolean this_present_deleteTime = true && this.isSetDeleteTime();
    boolean that_present_deleteTime = true && that.isSetDeleteTime();
    if (this_present_deleteTime || that_present_deleteTime) {
      if (!(this_present_deleteTime && that_present_deleteTime))
        return false;
      if (!this.deleteTime.equals(that.deleteTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_isDelete = true && this.isSetIsDelete();
    boolean that_present_isDelete = true && that.isSetIsDelete();
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (!this.isDelete.equals(that.isDelete))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_archivesType = true && this.isSetArchivesType();
    boolean that_present_archivesType = true && that.isSetArchivesType();
    if (this_present_archivesType || that_present_archivesType) {
      if (!(this_present_archivesType && that_present_archivesType))
        return false;
      if (!this.archivesType.equals(that.archivesType))
        return false;
    }

    boolean this_present_archivesAnnual = true && this.isSetArchivesAnnual();
    boolean that_present_archivesAnnual = true && that.isSetArchivesAnnual();
    if (this_present_archivesAnnual || that_present_archivesAnnual) {
      if (!(this_present_archivesAnnual && that_present_archivesAnnual))
        return false;
      if (!this.archivesAnnual.equals(that.archivesAnnual))
        return false;
    }

    boolean this_present_schoolCode = true && this.isSetSchoolCode();
    boolean that_present_schoolCode = true && that.isSetSchoolCode();
    if (this_present_schoolCode || that_present_schoolCode) {
      if (!(this_present_schoolCode && that_present_schoolCode))
        return false;
      if (!this.schoolCode.equals(that.schoolCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetStudentCode()) ? 131071 : 524287);
    if (isSetStudentCode())
      hashCode = hashCode * 8191 + studentCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetClassCode()) ? 131071 : 524287);
    if (isSetClassCode())
      hashCode = hashCode * 8191 + classCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchivesName()) ? 131071 : 524287);
    if (isSetArchivesName())
      hashCode = hashCode * 8191 + archivesName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeacherCode()) ? 131071 : 524287);
    if (isSetTeacherCode())
      hashCode = hashCode * 8191 + teacherCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeacherComment()) ? 131071 : 524287);
    if (isSetTeacherComment())
      hashCode = hashCode * 8191 + teacherComment.hashCode();

    hashCode = hashCode * 8191 + ((isSetModifyTime()) ? 131071 : 524287);
    if (isSetModifyTime())
      hashCode = hashCode * 8191 + modifyTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteTime()) ? 131071 : 524287);
    if (isSetDeleteTime())
      hashCode = hashCode * 8191 + deleteTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsDelete()) ? 131071 : 524287);
    if (isSetIsDelete())
      hashCode = hashCode * 8191 + isDelete.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchivesType()) ? 131071 : 524287);
    if (isSetArchivesType())
      hashCode = hashCode * 8191 + archivesType.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchivesAnnual()) ? 131071 : 524287);
    if (isSetArchivesAnnual())
      hashCode = hashCode * 8191 + archivesAnnual.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchoolCode()) ? 131071 : 524287);
    if (isSetSchoolCode())
      hashCode = hashCode * 8191 + schoolCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ArchivesModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStudentCode()).compareTo(other.isSetStudentCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentCode, other.studentCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClassCode()).compareTo(other.isSetClassCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classCode, other.classCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArchivesName()).compareTo(other.isSetArchivesName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivesName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivesName, other.archivesName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeacherCode()).compareTo(other.isSetTeacherCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherCode, other.teacherCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeacherComment()).compareTo(other.isSetTeacherComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherComment, other.teacherComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModifyTime()).compareTo(other.isSetModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, other.modifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeleteTime()).compareTo(other.isSetDeleteTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteTime, other.deleteTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArchivesType()).compareTo(other.isSetArchivesType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivesType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivesType, other.archivesType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArchivesAnnual()).compareTo(other.isSetArchivesAnnual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivesAnnual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivesAnnual, other.archivesAnnual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchoolCode()).compareTo(other.isSetSchoolCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolCode, other.schoolCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ArchivesModel(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentCode:");
    if (this.studentCode == null) {
      sb.append("null");
    } else {
      sb.append(this.studentCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classCode:");
    if (this.classCode == null) {
      sb.append("null");
    } else {
      sb.append(this.classCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivesName:");
    if (this.archivesName == null) {
      sb.append("null");
    } else {
      sb.append(this.archivesName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherCode:");
    if (this.teacherCode == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherComment:");
    if (this.teacherComment == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyTime:");
    if (this.modifyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteTime:");
    if (this.deleteTime == null) {
      sb.append("null");
    } else {
      sb.append(this.deleteTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    if (this.isDelete == null) {
      sb.append("null");
    } else {
      sb.append(this.isDelete);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivesType:");
    if (this.archivesType == null) {
      sb.append("null");
    } else {
      sb.append(this.archivesType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivesAnnual:");
    if (this.archivesAnnual == null) {
      sb.append("null");
    } else {
      sb.append(this.archivesAnnual);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schoolCode:");
    if (this.schoolCode == null) {
      sb.append("null");
    } else {
      sb.append(this.schoolCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArchivesModelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchivesModelStandardScheme getScheme() {
      return new ArchivesModelStandardScheme();
    }
  }

  private static class ArchivesModelStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArchivesModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ArchivesModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STUDENT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentCode = iprot.readString();
              struct.setStudentCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLASS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classCode = iprot.readString();
              struct.setClassCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARCHIVES_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archivesName = iprot.readString();
              struct.setArchivesNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEACHER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherCode = iprot.readString();
              struct.setTeacherCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEACHER_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherComment = iprot.readString();
              struct.setTeacherCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyTime = iprot.readString();
              struct.setModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELETE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deleteTime = iprot.readString();
              struct.setDeleteTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isDelete = iprot.readString();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ARCHIVES_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archivesType = iprot.readString();
              struct.setArchivesTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ARCHIVES_ANNUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archivesAnnual = iprot.readString();
              struct.setArchivesAnnualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SCHOOL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schoolCode = iprot.readString();
              struct.setSchoolCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ArchivesModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.studentCode != null) {
        oprot.writeFieldBegin(STUDENT_CODE_FIELD_DESC);
        oprot.writeString(struct.studentCode);
        oprot.writeFieldEnd();
      }
      if (struct.classCode != null) {
        oprot.writeFieldBegin(CLASS_CODE_FIELD_DESC);
        oprot.writeString(struct.classCode);
        oprot.writeFieldEnd();
      }
      if (struct.archivesName != null) {
        oprot.writeFieldBegin(ARCHIVES_NAME_FIELD_DESC);
        oprot.writeString(struct.archivesName);
        oprot.writeFieldEnd();
      }
      if (struct.teacherCode != null) {
        oprot.writeFieldBegin(TEACHER_CODE_FIELD_DESC);
        oprot.writeString(struct.teacherCode);
        oprot.writeFieldEnd();
      }
      if (struct.teacherComment != null) {
        oprot.writeFieldBegin(TEACHER_COMMENT_FIELD_DESC);
        oprot.writeString(struct.teacherComment);
        oprot.writeFieldEnd();
      }
      if (struct.modifyTime != null) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.modifyTime);
        oprot.writeFieldEnd();
      }
      if (struct.deleteTime != null) {
        oprot.writeFieldBegin(DELETE_TIME_FIELD_DESC);
        oprot.writeString(struct.deleteTime);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.isDelete != null) {
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeString(struct.isDelete);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.archivesType != null) {
        oprot.writeFieldBegin(ARCHIVES_TYPE_FIELD_DESC);
        oprot.writeString(struct.archivesType);
        oprot.writeFieldEnd();
      }
      if (struct.archivesAnnual != null) {
        oprot.writeFieldBegin(ARCHIVES_ANNUAL_FIELD_DESC);
        oprot.writeString(struct.archivesAnnual);
        oprot.writeFieldEnd();
      }
      if (struct.schoolCode != null) {
        oprot.writeFieldBegin(SCHOOL_CODE_FIELD_DESC);
        oprot.writeString(struct.schoolCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArchivesModelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchivesModelTupleScheme getScheme() {
      return new ArchivesModelTupleScheme();
    }
  }

  private static class ArchivesModelTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArchivesModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ArchivesModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetStudentCode()) {
        optionals.set(2);
      }
      if (struct.isSetClassCode()) {
        optionals.set(3);
      }
      if (struct.isSetArchivesName()) {
        optionals.set(4);
      }
      if (struct.isSetTeacherCode()) {
        optionals.set(5);
      }
      if (struct.isSetTeacherComment()) {
        optionals.set(6);
      }
      if (struct.isSetModifyTime()) {
        optionals.set(7);
      }
      if (struct.isSetDeleteTime()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetArchivesType()) {
        optionals.set(12);
      }
      if (struct.isSetArchivesAnnual()) {
        optionals.set(13);
      }
      if (struct.isSetSchoolCode()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetStudentCode()) {
        oprot.writeString(struct.studentCode);
      }
      if (struct.isSetClassCode()) {
        oprot.writeString(struct.classCode);
      }
      if (struct.isSetArchivesName()) {
        oprot.writeString(struct.archivesName);
      }
      if (struct.isSetTeacherCode()) {
        oprot.writeString(struct.teacherCode);
      }
      if (struct.isSetTeacherComment()) {
        oprot.writeString(struct.teacherComment);
      }
      if (struct.isSetModifyTime()) {
        oprot.writeString(struct.modifyTime);
      }
      if (struct.isSetDeleteTime()) {
        oprot.writeString(struct.deleteTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeString(struct.isDelete);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetArchivesType()) {
        oprot.writeString(struct.archivesType);
      }
      if (struct.isSetArchivesAnnual()) {
        oprot.writeString(struct.archivesAnnual);
      }
      if (struct.isSetSchoolCode()) {
        oprot.writeString(struct.schoolCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ArchivesModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.studentCode = iprot.readString();
        struct.setStudentCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.classCode = iprot.readString();
        struct.setClassCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.archivesName = iprot.readString();
        struct.setArchivesNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.teacherCode = iprot.readString();
        struct.setTeacherCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.teacherComment = iprot.readString();
        struct.setTeacherCommentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.modifyTime = iprot.readString();
        struct.setModifyTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deleteTime = iprot.readString();
        struct.setDeleteTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isDelete = iprot.readString();
        struct.setIsDeleteIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.archivesType = iprot.readString();
        struct.setArchivesTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.archivesAnnual = iprot.readString();
        struct.setArchivesAnnualIsSet(true);
      }
      if (incoming.get(14)) {
        struct.schoolCode = iprot.readString();
        struct.setSchoolCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

