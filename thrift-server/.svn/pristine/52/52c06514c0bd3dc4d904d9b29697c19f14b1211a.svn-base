package com.github.mql.rpc.invoke;


import com.github.mql.rpc.configBean.Reference;
import com.github.mql.rpc.loadbalance.LoadBalance;
import com.github.mql.rpc.loadbalance.NodeInfo;
import com.github.mql.rpc.thrift.ThriftSocketPoolFactory;
import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TServiceClient;
import org.apache.thrift.TServiceClientFactory;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TMultiplexedProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

public class ThriftInvoke implements Invoke {

    GenericKeyedObjectPool<String, TSocket> pool = new GenericKeyedObjectPool<>(new ThriftSocketPoolFactory());

    @Override
    public Object invoke(Invocation invocation) throws Exception {

        //这个是负载均衡算法
        String loadbalance = invocation.getReferenceBean().getLoadbalance();
        LoadBalance loadbalanceBean = Reference.loadBalances.get(loadbalance);
        List<String> registryInfo = invocation.getReferenceBean().getRegistryInfo();
        NodeInfo nodeinfo = loadbalanceBean.doSelect(registryInfo);
        String key = nodeinfo.getHost()+":"+nodeinfo.getPort();

        Class<?> factoryClass = getFactoryClass(invocation.getReferenceClass());

        Object result = null;
        TSocket tsocket = null;
        try{
            TServiceClientFactory<TServiceClient> clientFactory = (TServiceClientFactory<TServiceClient>) factoryClass.newInstance();
            tsocket = pool.borrowObject(key);
            TTransport transport = new TFramedTransport(tsocket);
            TProtocol protocol = new TBinaryProtocol(transport);
            TMultiplexedProtocol mpProtocol = new TMultiplexedProtocol(protocol, invocation.getReferenceClass().getDeclaringClass().getName());
            TServiceClient client = clientFactory.getClient(mpProtocol);
            result = invocation.getMethod().invoke(client, invocation.getObjs());
        } catch (Exception e){
            if(!InvocationTargetException.class.isInstance(e)){
                if(null != tsocket){
                    pool.invalidateObject(key, tsocket);
                }
                throw e;
            }
            InvocationTargetException inve = (InvocationTargetException) e;
            if(!TApplicationException.class.isInstance(inve.getTargetException())){
                throw e;
            }

            TApplicationException appe = (TApplicationException)inve.getTargetException();
            if(appe.getType() != TApplicationException.MISSING_RESULT){
                throw e;
            }
            result = null;
        }finally{
            if( null != tsocket)
            {
                pool.returnObject(key, tsocket);
            }
        }
        return result;
    }


    private Class<?> getFactoryClass(Class<?> iFaceInterface)
    {
        Class<?> factoryClass = null;
        try
        {
            Class<?> serviceClass = iFaceInterface.getDeclaringClass();
            factoryClass = iFaceInterface.getClassLoader().loadClass(serviceClass.getName() + "$Client$Factory");
        } catch (Exception e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return factoryClass;
    }
}
